#include <Windows.h>
#include <stdio.h>
#include <stdint.h>
#include <winternl.h>

typedef LONG(__stdcall* NtCreateSection_t)(HANDLE*, ULONG, void*, LARGE_INTEGER*, ULONG, ULONG, HANDLE);
typedef LONG(__stdcall* NtMapViewOfSection_t)(HANDLE, HANDLE, PVOID*, ULONG_PTR, SIZE_T, PLARGE_INTEGER, PSIZE_T, DWORD, ULONG, ULONG);

int32_t wmain(int32_t nArgc, const wchar_t* pArgv[]) {
	printf("... current PID: %d\r\n", GetCurrentProcessId());

	if (nArgc < 2) {
		printf("... usage: %ws <PID>\r\n", pArgv[0]);
	}
	else {
		uint32_t dwPid = _wtoi(pArgv[2]);
		HANDLE hProcess;

		printf("... opening handle to PID %d... ", dwPid);

		if ((hProcess = OpenProcess(PROCESS_VM_OPERATION, FALSE, dwPid)) != NULL) {
			uint8_t* pPrivateRegion = NULL;
			uint8_t* pMappedRegion = NULL;
			uint8_t* pImageRegion = NULL;

			printf("success.\r\n");
			printf("... allocating remote private region... ");

			if ((pPrivateRegion = (uint8_t*)VirtualAllocEx(hProcess, nullptr, 1, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE)) != NULL) {
				printf("success: 0x%p\r\n", pPrivateRegion);
			}
			else {
				printf("failed (error %d)\r\n", GetLastError());
			}

			printf("... mapping remote mapped region from the page file... ");

			NtCreateSection_t NtCreateSection;
			NtMapViewOfSection_t NtMapViewOfSection;
			HMODULE hNtdll = LoadLibraryW(L"ntdll.dll");
			HANDLE hFile = CreateFileW(L"vuln.dll", GENERIC_READ, 0, nullptr, OPEN_EXISTING, 0, nullptr);
			HANDLE hSection = nullptr;

			if (hFile != INVALID_HANDLE_VALUE) {
				NtCreateSection = (NtCreateSection_t)GetProcAddress(hNtdll, "NtCreateSection");
				NtMapViewOfSection = (NtMapViewOfSection_t)GetProcAddress(hNtdll, "NtMapViewOfSection");
				NTSTATUS NtStatus = NtCreateSection(&hSection, SECTION_ALL_ACCESS, nullptr, nullptr, PAGE_READONLY, SEC_IMAGE, hFile);

				if (NT_SUCCESS(NtStatus)) {
					printf("SUCCESS\r\n");
					uint8_t* pMapBuf = nullptr;
					uint64_t qwMapBufSize = 0; // The map view is an in and out parameter, if it isn't zero the map may have its size overwritten
					NtStatus = NtMapViewOfSection(hSection, GetCurrentProcess(), (void**)&pMapBuf, 0, 0, nullptr, (PSIZE_T)&qwMapBufSize, 1, 0, PAGE_READONLY); // AllocationType of MEM_COMMIT|MEM_RESERVE is not needed for SEC_IMAGE.

					if (NT_SUCCESS(NtStatus)) {
						//
					}
				}
			}
		}
		else {
			printf("failed (error %d)\r\n", GetLastError());
		}
	}

	system("pause");
	return 0;
}