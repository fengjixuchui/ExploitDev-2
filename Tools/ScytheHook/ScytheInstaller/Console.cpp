#include "stdafx.h"
#include "sdk.hpp"

#pragma comment(lib, "procmonsdk.lib")

shared_ptr<Interface> Intf;
shared_ptr<ApiTable> DynamicApis;

class CMyEvent : public IEventCallback
{
public:
	virtual BOOL DoEvent(const CRefPtr<CEventView> pEventView)
	{
		if(pEventView->GetEventClass() == MONITOR_TYPE_PROCESS) {
			/*
			ULONGLONG Time = pEventView->GetStartTime().QuadPart;

			LogMessage(L_INFO, TEXT("%llu Process %s Do 0x%x %s for %s"),
				Time,
				pEventView->GetProcessName().GetBuffer(),
				pEventView->GetEventOperator(),
				StrMapOperation(pEventView->GetPreEventEntry()),
				pEventView->GetPath().GetBuffer());

			if (pEventView->GetEventOperator() == LOG_PROCESS_NOTIFY_TYPE::NOTIFY_PROCESS_CREATE) {
				printf("! PROCESS CREATE\r\n");
			}
			else if (pEventView->GetEventOperator() == LOG_PROCESS_NOTIFY_TYPE::NOTIFY_PROCESS_START) {
				printf("! PROCESS START\r\n");
			}
			else if (pEventView->GetEventOperator() == LOG_PROCESS_NOTIFY_TYPE::NOTIFY_PROCESS_INIT) {
				printf("! PROCESS INIT: %ws %d parent %d\r\n", pEventView->GetImagePath().GetBuffer(), pEventView->GetProcessId(), pEventView->GetParentProcessId());
			}
			*/

			if (pEventView->GetEventOperator() == LOG_PROCESS_NOTIFY_TYPE::NOTIFY_PROCESS_INIT) {
				printf("! PROCESS INIT: %ws %d parent %d\r\n", pEventView->GetImagePath().GetBuffer(), pEventView->GetProcessId(), pEventView->GetParentProcessId());

				try {
					Process NewPs(Intf, DynamicApis, pEventView->GetProcessId(), pEventView->GetProcessName().GetBuffer());
					bool bValidTarget = false;
					Intf->Log("... successfully initialized class object for PID %d\r\n", pEventView->GetProcessId());
#ifdef _WIN64
					if (!NewPs.IsWow64()) {
						bValidTarget = true;
					}
#else
					if (NewPs.IsWow64()) {
						bValidTarget = true;
					}
#endif
					if (bValidTarget) {
						//
					}
				}
				catch (int32_t nError) {
					Intf->Log("... failed to initialize class object for PID %d\r\n", pEventView->GetProcessId());
				}
			}
		}
		return TRUE;
	}
};


int main()
{

	CEventMgr& Optmgr = Singleton<CEventMgr>::getInstance();
	CMonitorContoller& Monitormgr = Singleton<CMonitorContoller>::getInstance();
	CDrvLoader& Drvload = Singleton<CDrvLoader>::getInstance();
	Intf = make_shared<Interface>(true, VerbosityLevel::Surface);
	DynamicApis = make_shared<ApiTable>(Intf);

	if (!Drvload.Init(TEXT("PROCMON24"), TEXT("procmon.sys"))) {
		return -1;
	}
	Optmgr.RegisterCallback(new CMyEvent);

	//
	// Try to connect to procmon driver
	//

	if (!Monitormgr.Connect()) {
		LogMessage(L_ERROR, TEXT("Cannot connect to procmon driver"));
		return -1;
	}

	//
	// try to start monitor
	//

	Monitormgr.SetMonitor(TRUE, TRUE, FALSE);
	if (!Monitormgr.Start()) {
		LogMessage(L_ERROR, TEXT("Cannot start the mointor"));
		return -1;
	}

	system("pause");

	//
	// try to stop the monitor
	//

	Monitormgr.Stop();

	LogMessage(L_INFO, TEXT("!!!!!monitor stop press any key to start!!!!"));
	system("pause");

	Monitormgr.Start();

	system("pause");

	Monitormgr.Stop();
	Monitormgr.Destory();
	return 0;
}