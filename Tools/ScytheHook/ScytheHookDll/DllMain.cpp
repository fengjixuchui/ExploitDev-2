#include "StdAfx.h"
#include "MinHook.h"

using namespace std;

#if defined _M_X64
#pragma comment(lib, "libMinHook.x64.lib")
#elif defined _M_IX86
#pragma comment(lib, "libMinHook-x86-v141-mt.lib")
#endif

typedef NTSTATUS (NTAPI *NtMapViewOfSection_t)(HANDLE SectionHandle, HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, ULONG InheritDisposition, ULONG AllocationType, ULONG Win32Protect);

typedef int (WINAPI* MESSAGEBOXW)(HWND, LPCWSTR, LPCWSTR, UINT);
//typedef LONG(NTAPI* NtMapViewOfSection_t)(HANDLE, HANDLE, PVOID*, ULONG_PTR, SIZE_T, PLARGE_INTEGER, PSIZE_T, DWORD, ULONG, ULONG);

shared_ptr<Interface> Intf;
NtMapViewOfSection_t gpNtMapViewOfSectionTrampoline = nullptr;

NTSTATUS NTAPI DetourNtMapViewOfSection(HANDLE SectionHandle, HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, ULONG InheritDisposition, ULONG AllocationType, ULONG Win32Protect)
{
    Intf->Log("... NtMapViewOfSection called with parameters:\r\n");
    Intf->Log("    SectionHandle: 0x%p\r\n", SectionHandle);
    Intf->Log("    ProcessHandle: 0x%p\r\n", ProcessHandle);
    Intf->Log("    BaseAddress: 0x%p\r\n", BaseAddress);
    Intf->Log("    ZeroBits: 0x%p\r\n", ZeroBits);
    Intf->Log("    CommitSize: 0x%08x\r\n", CommitSize);
    Intf->Log("    SectionOffset: 0x%p\r\n", SectionOffset);
    Intf->Log("    ViewSize: 0x%p\r\n", ViewSize);
    Intf->Log("    InheritDisposition: 0x%08x\r\n", InheritDisposition);
    Intf->Log("    AllocationType: 0x%08x\r\n", AllocationType);
    Intf->Log("    Win32Protect: 0x%08x\r\n", Win32Protect);
    return gpNtMapViewOfSectionTrampoline(SectionHandle, ProcessHandle, BaseAddress, ZeroBits, CommitSize, SectionOffset, ViewSize, InheritDisposition, AllocationType, Win32Protect);
}

bool SetHooks() {
    HMODULE hNtdllModule = GetModuleHandleW(L"ntdll.dll");
    NtMapViewOfSection_t NtMapViewOfSection = (NtMapViewOfSection_t)GetProcAddress(hNtdllModule, "NtMapViewOfSection");

    Intf = make_shared<Interface>(L"C:\\ProgramData\\ScytheHook.log", VerbosityLevel::Surface);

    if (MH_Initialize() == MH_OK)
    {

        //gpOriginalNtMapViewOfSection = (NtMapViewOfSection_t)GetProcAddress(hNtdllModule, "NtMapViewOfSection");

        // or you can use the new helper function like this.
        /*
        if (MH_CreateHookApiEx(L"ntdll.dll", "NtMapViewOfSection", &DetourNtMapViewOfSection, reinterpret_cast<void**>(&gpOriginalNtMapViewOfSection), nullptr) != MH_OK)
        {
            return 1;
        }*/

        if (MH_CreateHook(NtMapViewOfSection, &DetourNtMapViewOfSection,
            reinterpret_cast<LPVOID*>(&gpNtMapViewOfSectionTrampoline)) == MH_OK)
        {

            // Enable the hook for MessageBoxW.
            if (MH_EnableHook(NtMapViewOfSection) == MH_OK)
            {

                Intf->Log("... successfully set and enabled hook on NtMapViewOfSection at 0x%p\r\n", NtMapViewOfSection);
                /*
                if (MH_DisableHook(NtMapViewOfSection) != MH_OK)
                {
                    return 1;
                }*/

                return true;
            }
        }
        /*
        // Uninitialize MinHook.
        if (MH_Uninitialize() != MH_OK)
        {
            return 1;
        }*/
    }

    return false;
}

BOOL DllMain(HINSTANCE hInstance, uint32_t dwReason, void* pReserved) {
	if (dwReason == DLL_PROCESS_ATTACH) {
		SetHooks();
	}

	return TRUE;
}