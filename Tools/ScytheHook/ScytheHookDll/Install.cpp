#include "stdafx.h"
#include "ScytheHookDll.h"

bool InjectDll(uint32_t dwTargetPid, const wchar_t *DllPath) {
	HANDLE hProcess = OpenProcess(PROCESS_VM_OPERATION | PROCESS_VM_WRITE | PROCESS_CREATE_THREAD, false, dwTargetPid);

	if (hProcess != nullptr) {
		uint8_t *pRemoteBuf = VirtualAllocEx(hProcess, nullptr, (wcslen(DllPath) + 1) * 2
	}
}

extern "C" __declspec(dllexport) void Install() {
	PROCESSENTRY32W ProcEntry = { 0 };
	HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	Interface Intf(true);
	wchar_t SelfModulePath[MAX_PATH + 1] = { 0 };

	GetModuleFileNameW(ghInstance, SelfModulePath, MAX_PATH + 1);

	Intf.Log("... enumerating processes for DLL injection...\r\n");

	if (hSnapshot != nullptr) {
		ProcEntry.dwSize = sizeof(PROCESSENTRY32W);

		if (Process32FirstW(hSnapshot, &ProcEntry)) {
			do {
				if (ProcEntry.th32ProcessID != GetCurrentProcessId()) {
					if (InjectDll(ProcEntry.th32ProcessID, SelfModulePath)) {
						Intf.Log("... successfully injected %ws into %d\r\n", SelfModulePath, ProcEntry.th32ProcessID);
					}
					else {
						Intf.Log("... failed to inject %ws into %d\r\n", SelfModulePath, ProcEntry.th32ProcessID);
					}
				}
			} while (Process32NextW(hSnapshot, &ProcEntry));
		}

		CloseHandle(hSnapshot);
	}

	system("pause");
}