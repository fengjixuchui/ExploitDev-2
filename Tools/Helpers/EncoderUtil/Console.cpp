#include "StdAfx.h"

enum class OperationType {
	Invalid = 0,
	Padding,
	Address,
	Unescape
};

int32_t wmain(int32_t nArgc, const wchar_t* pArgv[]) {
	vector<wstring> Args(&pArgv[0], &pArgv[0 + nArgc]);
	shared_ptr<Interface> Intf = make_shared<Interface>(Args);

	if (nArgc < 5) {
		Intf->Log("* Usage: %ws --op <padding|address|unescape> -ds <data string> -df <data file path> -c <output count>\r\n", pArgv[0]);
	}
	else {
		OperationType Op = OperationType::Invalid;
		wstring DataStr;
		wstring DataFilePath;
		int32_t nCount = 0;

		for (vector<wstring>::const_iterator i = Args.begin(); i != Args.end(); ++i) {
			wstring Arg = *i;
			transform(Arg.begin(), Arg.end(), Arg.begin(), ::tolower);

			if (Arg == L"--op") {
				if (*(i + 1) == L"padding") {
					Op = OperationType::Padding;
				}
				else if (*(i + 1) == L"address") {
					Op = OperationType::Address;
				}
				else if (*(i + 1) == L"unescape") {
					Op = OperationType::Unescape;
				}
			}
			else if (Arg == L"--ds") {
				DataStr = wstring((*(i + 1)));
			}
			else if (Arg == L"--df") {
				DataFilePath = wstring((*(i + 1)));
			}
			else if (Arg == L"-c") {
				nCount = _wtoi((*(i + 1)).c_str());
			}
		}

		unique_ptr<uint8_t[]> Data;
		uint32_t dwDataSize = 0;
		
		if (!DataFilePath.empty()) {
			try {
				FileBase DataFile(DataFilePath);
				dwDataSize = DataFile.GetSize();
				Data = make_unique<uint8_t[]>(DataFile.GetSize());
				memcpy(Data.get(), DataFile.GetData(), DataFile.GetSize());
				
			}
			catch (int32_t nError) {
				//
			}
		}

		if (!Data && DataStr.empty()) {
			Intf->Log("... fatal error: no input data specified\r\n");
		}

		if (Op == OperationType::Padding) {
			for (int32_t nX = 0; nX < nCount; nX++) {
				Intf->Log("%ws", DataStr.c_str());
			}
		}
		else if (Op == OperationType::Unescape) {
			if (dwDataSize % 2 != 0) {
				
				unique_ptr<uint8_t[]> Temp = make_unique<uint8_t[]>(dwDataSize);
				memcpy(Temp.get(), Data.get(), dwDataSize);
				dwDataSize++;
				Data = make_unique<uint8_t[]>(dwDataSize);
				ZeroMemory(Data.get(), dwDataSize);
				memcpy(Data.get(), Temp.get(), dwDataSize);
			}

			Intf->Log("unescape(\"");
			
			for (int32_t nX = 0; nX < dwDataSize; nX += 2) {
				Intf->Log("%%u%02x%02x", Data[nX + 1], Data[nX]);
			}

			Intf->Log("\");");
		}
		else if (Op == OperationType::Address) {
			uint8_t* pAddress = nullptr;
#ifdef _WIN64
			pAddress = (uint8_t*)wcstoull(DataStr.c_str(), NULL, 0);
#else
			pAddress = (uint8_t*)wcstoul(DataStr.c_str(), NULL, 0);
#endif
			//Intf->Log("0x%p\r\n", pAddress);
			uint8_t* pBuf = (uint8_t*)&pAddress;
			for (int32_t nX = 0; nX < sizeof(pAddress); nX++) {
				//char c = pAddress[nX];
				Intf->Log("\\x%02x", pBuf[nX]);
				//pAddress++;
			}
		}
	}

	return 0;
}